@startuml

package Domain{

    package UseCase{

        '実際の処理をUseCaseに記載
        class EditUseCase
        {
            IUnityInputPresenter inputPresenter;

            void Delete();
            void Add();
            void ChangePosition();
            void ChangeRotation);
            void ChangeScale();
            void ChangeFrame();
        }

        class IOUseCase
        {
            ISaveRepository saveRepository;
            IIOButtonPresenter ioButtonPresenter;
        }

    }

    interface IUnityInputPresenter
    {
        'usecaseがこれを叩いて、見た目を更新する
        void ApplyPosition();
        void ApplyRotation();
        void ApplyScale();
        ' Presenterからのイベント受け取り
        IObservable<int> OnChangeFrameAsObservable();
        IObservable<Vector3> OnChangePositionAsObservable();
        IObservable<Vector3> OnChangeRotationAsObservable();
        IObservable<Vector3> OnChangeScaleAsObservable();
    }

    interface IIOButtonPresenter
    {
        IObservable<Unit> OnClickSaveAsObservable();
        IObservable<Unit> OnClickLoadAsObservable();
    }

    interface ISaveRepository
    {
        UniTask SaveAsync();
        UniTask LoadAsync();
    }

    IOUseCase --> IIOButtonPresenter
    IOUseCase --> ISaveRepository
    EditUseCase --> IUnityInputPresenter
}

package Repository {

    class SaveDataRepository
    {
        UniTask SaveAsync();
        UniTask LoadAsync();
    }

    interface IDataStore {
        UniTask SaveAsync();
        UniTask LoadAsync();
    }

    ISaveRepository <|.. SaveDataRepository
    IDataStore <- SaveDataRepository
}

package Data {

    class JsonDataStore
    {
        UniTask SaveAsync();
        UniTask LoadAsync();
        void ToJson();
        void FromJson();
    }

    IDataStore <|.. JsonDataStore
}


package Presenter {

    class IOButtonPresenter
    {
        IObservable<Unit> OnClickSaveAsObservable();
        IObservable<Unit> OnClickLoadAsObservable();
    }


    class UnityInputPresenter
    {
        void ApplyPosition();
        void ApplyRotation();
        void ApplyScale();
        IObservable<int> OnChangeFrameAsObservable();
        IObservable<Vector3> OnChangePositionAsObservable();
        IObservable<Vector3> OnChangeRotationAsObservable();
        IObservable<Vector3> OnChangeScaleAsObservable();
    }

    interface IUIView
    {
        IObservable<Unit> OnClickSaveButtonAsObservable();
        IObservable<float> OnPositionXAsObservable();
        IObservable<float> OnPositionYAsObservable();
        IObservable<float> OnPositionZAsObservable();
        void ChangePosition();
        void ChangeRoatation();
        void ChangeScale();
    }

    interface IGameView
    {
        void ChangePosition(int id, Vector3 position);
        void ChangeRotation(int id, Vector3 rotation);
        void ChangeScale(int id, Vector3 scale);
    }

    IIOButtonPresenter <|.. IOButtonPresenter
    IUnityInputPresenter <|.. UnityInputPresenter
    UnityInputPresenter --> IUIView
    UnityInputPresenter --> IGameView
    IOButtonPresenter --> IUIView
}

package Detail {

    'UnityEngine.UIを知っている
    class UIView
    {
        UnityEngine.UI.Button saveButton;
        UnityEngine.UI.Button loadButton;
        UnityEngine.UI.Button positionButtton;
        UnityEngine.UI.Button rotationButtton;
        UnityEngine.UI.Button scaleButtton;

        'idを渡したいのでint
        IObservable<int> OnClickSaveButtonAsObservable();
        IObservable<int> OnClickLoadButtonAsObservable();
        IObservable<Vector3> OnClickPositionAsObservable();
        IObservable<Vector3> OnClickRotationAsObservable();
        IObservable<Vector3> OnClickScaleAsObservable();
    }

    'UnityEngine.GameObjectを知っている
    class GameView
    {
        List<PlacedEffect> placedEffects;
        void ChangePosition(int id, Vector3 position);
        void ChangeRotation(int id, Vector3 rotation);
        void ChangeScale(int id, Vector3 scale);
    }

    IUIView <|.. UIView
    IGameView <|.. GameView
}


@enduml